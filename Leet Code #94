#include <stdio.h>
#include <stdlib.h>

// Definição da estrutura do nó da árvore
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Função para criar um novo nó
struct TreeNode* newNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Função inorderTraversal (já fornecida)
int* inorderTraversal(struct TreeNode* root, int* returnSize) {
    int* resposta = (int*)malloc(100 * sizeof(int)); // Alocação inicial
    *returnSize = 0;
    struct TreeNode* atual = root;
    struct TreeNode* ante;
    
    while (atual != NULL) {
        if (atual->left == NULL) {
            resposta[(*returnSize)++] = atual->val;
            atual = atual->right;
        } else {
            
            ante = atual->left;
            while (ante->right != NULL && ante->right != atual) {
                ante = ante->right;
            }
            
            if (ante->right == NULL) {
                
                ante->right = atual;
                atual = atual->left;
            } else {
                
                ante->right = NULL;
                resposta[(*returnSize)++] = atual->val;
                atual = atual->right;
            }
        }
    }
    
    return resposta;
}

int main() {
    // Criando uma árvore binária simples
    //       1
    //        \
    //         2
    //        /
    //       3
    struct TreeNode* root = newNode(1);
    root->right = newNode(2);
    root->right->left = newNode(3);
    
    int returnSize;
    int* result = inorderTraversal(root, &returnSize);
    
    printf("Travessia in-order: ");
    for (int i = 0; i < returnSize; i++) {
        printf("%d ", result[i]);
    }
    printf("\n");
    
    free(result); // Liberar a memória alocada
    
    // Liberar a memória da árvore (opcional, apenas para limpeza)
    free(root->right->left);
    free(root->right);
    free(root);
    
    return 0;
}
